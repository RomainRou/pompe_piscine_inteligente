blueprint:
  name: Pompe piscine intelligente - tous modes (avec Telegram)
  description: >
    💧 Gère automatiquement la pompe de piscine selon :<br>
    - 🕑 Heures fixes configurables (4 cycles/jour)<br>
    - 🌡️ Température de l’eau (durée = température ÷ 2)<br>
    - ❄️ Mode hiver avec filtration minimale (mode hiver indiqué par le sensor saison)<br>
    - ☁️ Conditions météo (désactive en cas de pluie et réactive si pas de pluie dans les 3h)<br>
    - 🌱 Saison (adaptation dynamique de la durée)<br>
    - 🧪 Mode traitement spécifique (brome, sel, algicide, floculant, etc.) avec durée prédéfinie<br>
    📌 **Recommandations générales pour la filtration :**<br>
    - 💧 **Durée quotidienne recommandée** = Température de l’eau ÷ 2<br>
    - 🕗 **2 cycles recommandés** <br>
    - Matin : entre 6h00 et 9h00<br>
    - Après-midi : entre 14h00 et 18h00<br>
    (Possibilité de rajouter 2 cycles heures par default 6h00,12h00,18h00,00h00)<br>
    - ❄️ En hiver : 30–60 min pendant les heures les plus froides (ex. 6h–8h)<br>
    - ⚠️ Éviter les heures chaudes si électrolyse ou UV non stabilisé<br>
    - 💡 Optimisation énergétique possible avec heures creuses<br>
    🧪 **Modes de traitement disponibles** (via input_select) :<br>
    - Filtration normale - T°/2 heures<br>
    - Anti-algues préventif - 4 à 6h<br>
    - Anti-algues curatif - 8 à 12h<br>
    - Chlore lent - T°/2 heures<br>
    - Chlore choc - 8 à 12h<br>
    - Oxygène actif - 6 à 12h<br>
    - Floculant - 2 à 4h + arrêt<br>
    - pH+ ou pH- - 2 à 4h<br>
    - Algicide longue durée - 6 à 8h<br>
    - Traitement multi-actions - 6 à 10h<br>
    - Brome - 12 à 24h<br>
    - Électrolyse au sel - 12 à 24h<br>
    - Anti-calcaire préventif - 8 à 14h<br>
    - Anti-calcaire curatif - 12 à 24h<br>
    📲 **Notifications Telegram** <br>
    - Envoi de messages lors du démarrage ou de l'arrêt de la pompe<br>
    - Avertissement si la filtration est annulée pour cause de mauvais temps<br>
    ⚙️ **Personnalisation complète via les entrées du blueprint** :<br>
    - Capteurs de température piscine et extérieure<br>
    - Entité météo pour désactivation en as de mauvais temps<br>
    - Mode hiver (input_boolean ou binary_sensor)<br>
    - Saison détectée automatiquement<br>
    - Configuration du volume de la piscine et du débit de la pompe<br>
    - Durées ajustables par type de traitement<br>
    - Gestion des cycles matin/après-midi<br>
    ✅ **Sécurité et efficacité** <br>
    - Le cycle est annulé si la météo devient défaroblable a la filtration<br>
    - La pompe est arrêtée automatiquement en fin de cycle<br>
    - Le mode revient sur "Filtration normale" après traitement spécial<br>
    🔧 *Personnalise chaque paramètre selon ton installation, ton traitement d’eau et ta stratégie énergétique.*
  domain: automation
  input:
    pompe_switch:
      name: Pompe piscine
      selector:
        entity:
          domain: switch
      description: Interrupteur de la pompe de la piscine

    input_temperature_piscine:
      name: Capteur température piscine
      selector:
        entity:
          domain: sensor
          device_class: temperature
      description: Sonde de température de la piscine

    input_temperature_exterieure:
      name: Sonde température extérieure
      selector:
        entity:
          domain: sensor
          device_class: temperature
      description: Sonde température extérieure

    input_weather_entity:
      name: Entité météo
      selector:
        entity:
          domain: weather
      description: Entité météo utilisée

    input_saison_sensor:
      name: Capteur de saison
      selector:
        entity:
          domain: sensor
      description: Capteur saison actuel (printemps, été, automne, hiver)

    input_select_mode:
      name: Input Select mode
      selector:
        entity:
          domain: input_select
      description: >
        Menu pour choisir le mode de filtration en fonction des produits utilisés

    input_heure_cycle_matin:
      name: Heure démarrage cycle matin
      default: "06:00:00"
      selector:
        time: {}
      description: >
        🕗 Recommandé entre 6h00 et 9h00 pour évacuer les dépôts nocturnes.
        Idéal pour démarrer la journée avec une eau propre.
    activation_cycle_1:
      name: Activation 2eme cycle
      default: false
      selector:
        boolean:
      description: >
        Bouton activation 2eme cycle le matin
    input_heure_2eme_cycle_matin:
      name: Heure 2eme cycle matin
      default: "12:00:00"
      selector:
        time: {}
      description: > 
        🕑 Heure de démarrage pour 2eme cycle le matin 
    input_heure_cycle_apresmidi:
      name: Heure démarrage cycle après-midi
      default: "16:00:00"
      selector:
        time: {}
      description: >
        🕓 Recommandé entre 14h00 et 18h00 pour couvrir la période la plus chaude.
        Cela limite la prolifération d’algues et optimise le traitement.   
    activation_cycle_2:
      name: Activation 2eme cycle apres-midi
      default: false
      selector:
        boolean:
      description: >
        Bouton activation 2eme cycle après-midi 
    input_heure_2eme_cycle_apresmidi:
      name: Heure 2eme cycle après-midi
      default: "00:00:00"
      selector:
        time: {}
      description: > 
        🕞 Heure de démarrage pour un 2eme cycle l'après-midi 

    input_seuil_temperature:
      name: Température minimale pour filtration (°C)
      default: 12
      selector:
        number:
          min: 0
          max: 40
          unit_of_measurement: "°C"
      description: >
        🌡️ Température en dessous de laquelle la filtration est ignorée (hors mode hiver).<br>
        🔹 Recommandé : **12°C**<br>
        ▪️ En dessous de 12°C, l’activité biologique est faible → filtration inutile.<br>
        ▪️ Au-dessus, micro-organismes et algues peuvent proliférer → filtration nécessaire.<br>
        ❄️ En mode hiver, ce seuil est ignoré et une filtration minimale est appliquée.<br> 

    input_filtration_minimale_hiver:
      name: Durée filtration minimale hiver (minutes)
      default: 30
      selector:
        number:
          min: 0
          max: 60
          unit_of_measurement: "minutes"
      description: >
        Réglage de la durée de filttration minimum en hiver

    input_contenance_piscine:
      name: Contenance piscine (m³)
      default: 5
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "m³"
      description: Volume total de la piscine

    input_debit_pompe_piscine:
      name: Débit pompe piscine (m³/h)
      default: 5
      selector:
        number:
          min: 1
          max: 20
          unit_of_measurement: "m³/h"
      description: Débit nominal de la pompe

    input_duree_cycle:
      name: Entité input_number stockage durée cycle (sec)
      default: input_number.pompe_piscine_duree_cycle
      selector:
        entity:
          domain: input_number

    input_cycle_start:
      name: Input_datetime début cycle
      default: input_datetime.piscine_cycle_debut
      selector:
        entity:
          domain: input_datetime

    input_cycle_en_cours:
      name: Input_boolean cycle en cours
      default: input_boolean.piscine_cycle_en_cours
      selector:
        entity:
          domain: input_boolean

    telegram_user:
      name: Utilisateur Telegram
      default: ""
      selector:
        text: {}
      description: ID utilisateur Telegram pour les notifications

    reglage_anti_calcaire_preventif:
      name: Anti-calcaire préventif
      default: 11
      selector:
        number:
          min: 8
          max: 14

    reglage_anti_calcaire_curatif:
      name: Anti-calcaire curatif
      default: 18
      selector:
        number:
          min: 12
          max: 24

    reglage_anti_algues_preventif:
      name: Anti-algues préventif
      default: 5
      selector:
        number:
          min: 4
          max: 6

    reglage_anti_algues_curatif:
      name: Anti-algues curatif
      default: 10
      selector:
        number:
          min: 8
          max: 12

    reglage_chlore_choc:
      name: Chlore choc
      default: 10
      selector:
        number:
          min: 8
          max: 12

    reglage_oxygene_actif:
      name: Oxygène actif
      default: 9
      selector:
        number:
          min: 6
          max: 12

    reglage_floculant:
      name: Floculant
      default: 3
      selector:
        number:
          min: 2
          max: 4

    reglage_ph:
      name: pH+ / pH-
      default: 3
      selector:
        number:
          min: 2
          max: 4

    reglage_algicide_ld:
      name: Algicide longue durée
      default: 7
      selector:
        number:
          min: 6
          max: 8

    reglage_multi_actions:
      name: Traitement multi-actions
      default: 9
      selector:
        number:
          min: 6
          max: 10

    reglage_brome:
      name: Brome
      default: 18
      selector:
        number:
          min: 12
          max: 24

    reglage_sel:
      name: Électrolyse au sel
      default: 18
      selector:
        number:
          min: 12
          max: 24
        
variables:
  mode_entity: !input input_select_mode
  pompe_switch: !input pompe_switch
  temp_sensor_entity: !input input_temperature_piscine
  temp_exterieure_entity: !input input_temperature_exterieure
  debit_pompe: !input input_debit_pompe_piscine
  volume_piscine: !input input_contenance_piscine
  duree_filtration_minimale_hiver: !input input_filtration_minimale_hiver
  seuil_temp: !input input_seuil_temperature
  saison_entity: !input input_saison_sensor
  weather_entity: !input input_weather_entity
  telegram_user: !input telegram_user
  r_acp: !input reglage_anti_calcaire_preventif
  r_acc: !input reglage_anti_calcaire_curatif
  r_aap: !input reglage_anti_algues_preventif
  r_aac: !input reglage_anti_algues_curatif
  r_cc: !input reglage_chlore_choc
  r_oa: !input reglage_oxygene_actif
  r_f: !input reglage_floculant
  r_ph: !input reglage_ph
  r_alg_ld: !input reglage_algicide_ld
  r_ma: !input reglage_multi_actions
  r_brome: !input reglage_brome
  r_sel: !input reglage_sel
  mode: "{{ states[mode_entity].state }}"
  temp_piscine: "{{ states[temp_sensor_entity].state | float(0) }}"
  temp_exterieure: "{{ states[temp_exterieure_entity].state | float(0) }}"
  saison: "{{ states[saison_entity].state | lower }}"
  weather_state: "{{ states[weather_entity].state }}"
  mode_hiver: >
    {{ states('input_saison_sensor') | lower | trim in ['hiver', 'winter'] }}
  coefficient_saison: >
    {% set s = saison %}
    {% if s == 'winter' %} 0.5
    {% elif s == 'spring' %} 0.8
    {% elif s == 'summer' %} 1.2
    {% elif s == 'autumn' %} 0.7
    {% else %} 1.0
    {% endif %}
  is_rainy: >
    {% set weather = states(weather_entity).state %}
    {{ weather in ['rainy', 'pouring', 'snowy-rainy', 'hail', 'lightning-rainy', 'pluie', 'forte pluie', 'orage avec pluie', 'neige', 'neige fondue', 'grêle' ] }}
  duree_max_filtration_heures: >
    {% set heure_matin = states(input_heure_cycle_matin) %}
    {% set heure_apresmidi = states(input_heure_cycle_apresmidi) %}
    {% set t1 = strptime(heure_matin, "%H:%M:%S") %}
    {% set t2 = strptime(heure_apresmidi, "%H:%M:%S") %}
    {% set delta = (t2.timestamp() - t1.timestamp()) / 3600 %}
    {% if delta > 1 %}
      {{ (delta - 1) | round(2) }}
    {% else %}
      0
    {% endif %}

  duree_min_volume_heures: >
    {% set debit = debit_pompe | float(1) %}
    {% set volume = volume_piscine | float(1) %}
    {{ (volume / debit) | round(1) }}
  duree_heures: >
    {% if mode_hiver %}
      {{ (duree_filtration_minimale_hiver | float(30)) / 60 }}
    {% else %}
      {% set m = mode %}
      {% if m == 'Filtration normale' %}
        {% set duree_temp = ((temp_piscine + (temp_exterieure * 0.3)) / 2 / 2) | float(0) %}
        {% set duree_volume = duree_min_volume_heures | float(0) %}
        {% set duree = [duree_temp, duree_volume] | max | float(0) %}
        {% set coeff_saison = coefficient_saison | float(1.0) %}
        {% set base_duree = (duree * coeff_saison) | float(0) %}
        {% set eco1 = is_state('input_boolean.input_activation_cycle_1', 'on') %}
        {% set eco2 = is_state('input_boolean.input_activation_cycle_2', 'on') %}
        {% if eco1 and eco2 %}
          {{ [base_duree / 4, duree_max_filtration_heures] | min | round(2) }}
        {% elif eco1 or eco2 %}
          {{ [base_duree / 3, duree_max_filtration_heures] | min | round(2) }}
        {% else %}
          {{ [base_duree, duree_max_filtration_heures] | min | round(2) }}
        {% endif %}
        {% else %}
          {{ [base_duree, duree_max_filtration_heures] | min | round(2) }}
        {% endif %}
      {% else %}
        {% set duree_temp = (
          (temp_piscine / 2) if m == 'Chlore lent' else
          r_acp if m == 'Anti-calcaire préventif' else
          r_acc if m == 'Anti-calcaire curatif' else
          r_aap if m == 'Anti-algues préventif' else
          r_aac if m == 'Anti-algues curatif' else
          r_cc if m == 'Chlore choc' else
          r_oa if m == 'Oxygène actif' else
          r_f if m == 'Floculant' else
          r_ph if m == 'pH+ ou pH-' else
          r_alg_ld if m == 'Algicide longue durée' else
          r_ma if m == 'Traitement multi-actions' else
          r_brome if m == 'Brome' else
          r_sel if m == 'Électrolyse au sel' else
          0
        ) | float(0) %}
        {{ (duree_temp * coefficient_saison) | round(1) }}
      {% endif %}
    {% endif %}
  duree_secondes: "{{ (duree_heures | float(0)) * 3600 }}"
  duree_finale: "{{ duree_secondes }}"
  duree_secondes_par_cycle: "{{ duree_secondes }}"
  duree_heures_par_cycle: "{{ duree_heures }}"
  season_emoji: >
    {% set s = saison %}
    {% if s == 'spring' %} 🌸
    {% elif s == 'summer' %} ☀️
    {% elif s == 'autumn' %} 🍂
    {% elif s == 'winter' %} ❄️
    {% else %} ❓
    {% endif %}
  season_label_fr: >
    {% set s = states[saison_entity].state | lower %}
    {% if s in ['spring', 'printemps'] %} printemps
    {% elif s in ['summer', 'été', 'ete'] %} été
    {% elif s in ['autumn', 'fall', 'automne'] %} automne
    {% elif s in ['winter', 'hiver'] %} hiver
    {% else %} inconnu
    {% endif %}
  weather_emoji: >
    {% set ws = weather_state %}
    {% if ws == 'clear' %} ☀️
    {% elif ws == 'cloudy' %} ☁️
    {% elif ws == 'fog' %} 🌫️
    {% elif ws == 'hail' %} 🌨️
    {% elif ws == 'lightning' %} 🌩️
    {% elif ws == 'lightning-rainy' %} ⛈️
    {% elif ws == 'partlycloudy' %} 🌤️
    {% elif ws == 'pouring' %} 🌧️
    {% elif ws == 'rainy' %} 🌦️
    {% elif ws == 'snowy' %} ❄️
    {% elif ws == 'snowy-rainy' %} 🌨️
    {% elif ws == 'sunny' %} ☀️
    {% elif ws == 'windy' %} 💨
    {% elif ws == 'windy-variant' %} 🌬️
    {% else %} ❓
    {% endif %}
  weather_label_fr: >
    {% set ws = weather_state %}
    {% if ws == 'clear' %} ciel dégagé
    {% elif ws == 'cloudy' %} nuageux
    {% elif ws == 'fog' %} brouillard
    {% elif ws == 'hail' %} grêle
    {% elif ws == 'lightning' %} orage
    {% elif ws == 'lightning-rainy' %} orage avec pluie
    {% elif ws == 'partlycloudy' %} partiellement nuageux
    {% elif ws == 'pouring' %} forte pluie
    {% elif ws == 'rainy' %} pluie
    {% elif ws == 'snowy' %} neige
    {% elif ws == 'snowy-rainy' %} neige fondue
    {% elif ws == 'sunny' %} ensoleillé
    {% elif ws == 'windy' %} venteux
    {% elif ws == 'windy-variant' %} brise variable
    {% else %} météo inconnue
    {% endif %}
    
trigger:
  - platform: state
    entity_id: !input input_select_mode
    not_to:
      - "Filtration normale"
  - platform: state
    entity_id: !input input_weather_entity
    to:
      - rainy
      - pouring
      - snowy-rainy
      - hail
      - lightning-rainy
      - pluie
      - forte pluie
      - orage avec pluie
      - neige
      - neige fondue
      - grêle
    id: mauvais_temps

  - platform: time
    at: !input input_heure_cycle_apresmidi
    id: "cycle_apresmidi"
  - platform: time
    at: !input input_heure_cycle_matin
    id: "cycle_matin" 
action:
  - condition: template
    value_template: >
      {% set weather = states(weather_entity).state %}
      {{ weather not in ['rainy', 'pouring', 'snowy-rainy', 'hail', 'lightning-rainy', 'pluie', 'forte pluie', 'orage avec pluie', 'neige', 'neige fondue', 'grêle'] }}

  - choose:
      - conditions:
          - condition: template
            value_template: >
              {% set weather = states(weather_entity).state %}
              {{ weather in ['rainy', 'pouring', 'snowy-rainy', 'hail', 'lightning-rainy', 'pluie', 'forte pluie', 'orage avec pluie', 'neige', 'neige fondue', 'grêle' ] }}
        sequence:
          - service: telegram_bot.send_message
            data:
              target: "{{ telegram_user }}"
              message: |
                🌧️ Pompe non démarrée — météo défavorable : {{ weather_label_fr }} {{ weather_emoji }} donc pas de filtration lancée.
          - stop: "Météo défavorable"
  - variables:
      pompe_activee: false
  - choose:
      - conditions:
          - condition: state
            entity_id: !input pompe_switch
            state: "on"
          - condition: template
            value_template: "{{ trigger.id == 'mauvais_temps' }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: "{{ pompe_switch }}"
          - service: telegram_bot.send_message
            data:
              target: "{{ telegram_user }}"
              message: |
                🚨 Filtration arrêter a cause de la meteo défavorable {{ weather_label_fr}} {{ weather_emoji }} ! En attente pour une durée de 3h d'une meteo plus favorable pour relancé la pompe.
          - wait_template: >
              {{ states(weather_entity) not in [
                'rainy', 'pouring', 'snowy-rainy', 'hail', 'lightning-rainy', 
                'pluie', 'forte pluie', 'orage avec pluie', 'neige', 'neige fondue', 'grêle'
              ] }}
            timeout: "03:00:00"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ wait.completed }}"
                sequence:
                  - service: switch.turn_on
                    target:
                      entity_id: "{{ pompe_switch }}"
                  - service: telegram_bot.send_message
                    data:
                      target: "{{ telegram_user }}"
                      message: "✅ Météo redevenue favorable. Pompe relancée."
              - conditions:
                  - condition: template
                    value_template: "{{ not wait.completed }}"
                sequence:
                  - service: telegram_bot.send_message
                    data:
                      target: "{{ telegram_user }}"
                      message: "❌ Météo toujours défavorable après 3h. Pompe reste OFF."
          - stop: "fin scenario meteo"
      - conditions:
          - condition: template
            value_template: "{{ duree_secondes | int > 0 }}"
          - condition: template
            value_template: "{{ not is_rainy }}"
          - condition: template
            value_template: "{{ mode_hiver or temp_piscine >= seuil_temp }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: "{{ pompe_switch }}"
          - service: input_datetime.set_datetime
            target:
              entity_id: !input input_cycle_start
            data:
              datetime: "{{ now().strftime('%Y-%m-%dT%H:%M:%S') }}"
          - service: input_number.set_value
            target:
              entity_id: !input input_duree_cycle
            data:
              value: "{{ duree_secondes_par_cycle | float(0) }}"
          - service: input_boolean.turn_on
            target:
              entity_id: !input input_cycle_en_cours
          - variables:
              pompe_activee: true
          - service: telegram_bot.send_message
            data:
              target: "{{ telegram_user }}"
              message: >
                {% set h = duree_heures_par_cycle | int %}
                {% set m = ((duree_heures_par_cycle - h) * 60) | round(0) | int %}
                {% if mode == 'Hiver' %}
                  ❄️ Mode Hiver activé
                  💧 Pompe lancée en mode : {{ mode }}
                  🕒 Durée minimale forcée : {{ input_filtration_minimale_hiver | int }} minutes
                {% elif mode == 'Filtration normale' %}
                  {% set contenance = volume_piscine | float(0) %}
                  {% set debit = debit_pompe | float(1) %}
                  {% set duree_volume = (contenance / debit) / 2 %}
                  💧 Pompe lancée en mode : {{ mode }}
                  {{ season_emoji }} Saison en cours : {{ season_label_fr }}
                  {{ weather_emoji }} Météo au moment du lancement : {{ weather_label_fr }}
                  🧮 Coefficient saisonnier appliqué : x{{ coefficient_saison }}
                  🕒 Durée : {{ h }}h{{ ' {:02d}min'.format(m) if m > 0 else '' }}
                  📦 Volume piscine : {{ volume_piscine }} m³
                  🚿 Débit pompe : {{ debit_pompe }} m³/h
                  🧮 Calcul basé sur :
                  T°÷2 ou demi-volume {{ duree_min_volume_heures | round(1) }}h — valeur la plus grande retenue.
                {% else %}
                  💧 Pompe lancée en mode : {{ mode }}
                  🕒 Durée : {{ h }}h{{ ' {:02d}min'.format(m) if m > 0 else '' }}
                {% endif %}
  - condition: template
    value_template: "{{ pompe_activee }}"
  - delay:
      seconds: "{{ duree_secondes | int }}"

  - service: switch.turn_off
    target:
      entity_id: "{{ pompe_switch }}"
  - service: telegram_bot.send_message
    data:
      target: "{{ telegram_user }}"
      message: >
        {% set h = duree_heures_par_cycle | int %}
        {% set m = ((duree_heures_par_cycle - h) * 60) | round(0) | int %}
        {% if mode == 'Hiver' %}
          ❄️ Mode Hiver activé
          🛑 Pompe arrêtée automatiquement à la fin du cycle.
          💧 Mode : {{ mode }}
          🕒 Durée minimale effectuée : {{ input_filtration_minimale_hiver | int }} minutes
        {% elif mode == 'Filtration normale' %}
          {% set contenance = volume_piscine | float(0) %}
          {% set debit = debit_pompe | float(1) %}
          {% set duree_volume = (contenance / debit) / 2 %}
          🛑 Pompe arrêtée automatiquement à la fin du cycle.
          💧 Mode : {{ mode }}
          🕒 Après une durée de : {{ h }}h{{ ' {:02d}min'.format(m) if m > 0 else '' }}
          📦 Volume piscine : {{ contenance }} m³
          🚿 Débit pompe : {{ debit }} m³/h
          🔍 Calcul : T°÷2 ou demi-volume ({{ duree_volume | round(1) }}h) — valeur la plus grande retenue.
        {% else %}
          🛑 Pompe arrêtée automatiquement à la fin du cycle.
          💧 Mode : {{ mode }}
          🕒 Après une durée de : {{ h }}h{{ ' {:02d}min'.format(m) if m > 0 else '' }}
        {% endif %}
  - service: input_boolean.turn_off
    target:
      entity_id: !input input_cycle_en_cours
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ mode != 'Filtration normale' }}"
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input input_select_mode
            data:
              option: "Filtration normale"
mode: restart